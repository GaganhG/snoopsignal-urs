name: Upload Reddit Data to Airtable

on:
  workflow_dispatch:

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Download the previous scrape result artifact
      - name: Download scrape result
        uses: actions/download-artifact@v4
        with:
          name: reddit_scrape_result

      # 3. Unzip the artifact
      - name: Unzip artifact
        run: unzip reddit_scrape_result.zip -d output

      # 4. Set up Python 3.11
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 5. Install requests for the Airtable API
      - name: Install requests
        run: pip install requests

      # 6. Load output.json and push into Airtable
      - name: Extract & upload to Airtable
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        run: |
          python3 - << 'PYCODE'
          import os, json, requests

          # Load scraped posts
          data = json.load(open("output/output.json", encoding="utf-8"))

          key   = os.environ["AIRTABLE_API_KEY"]
          base  = os.environ["AIRTABLE_BASE_ID"]
          table = "Problems"
          url   = f"https://api.airtable.com/v0/{base}/{table}"

          headers = {
              "Authorization": f"Bearer {key}",
              "Content-Type": "application/json"
          }

          success = 0
          for item in data:
              post = item["post"]
              record = {
                  "fields": {
                      "title":   post["title"][:255],
                      "summary": post["selftext"][:800],
                      "lang":    "DE" if post["subreddit"] in ("de_IT","selfhosted","StartupDACH") else "EN",
                      "tags":    [post["subreddit"]]
                  }
              }
              r = requests.post(url, headers=headers, json=record)
              if r.status_code == 200:
                  success += 1
              else:
                  print("❌ Failed:", post["title"], r.status_code, r.text)

          print(f"✅ Uploaded {success}/{len(data)} records.")
          PYCODE
